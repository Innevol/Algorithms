//Justin Patel
//Benjamin Byrd
//Andrew Tang
//CSC4520 - HW1 

import java.util.Arrays;
import java.util.Random; 
import java.util.*;

public class SequentialSearch {

    int[] A;     

    public static void main(String[] args) {

        long starttime;
        long endtime;
        long totaltime1;
        long totaltime2;
        long totaltime3;
        long totaltime4;
        long totaltime5;

        Random rand = new Random();

        int[] A;
        int k = rand.nextInt(32768);
        A = new int[32768];
                
        for (int i = 0 ; i < A.length ; i++) { 

            A[i] = rand.nextInt(32768); //each element is a random number from 0 to 32767

        }

        Arrays.sort(A); //sorts the array

        /*
            EVERYTHING BELOW INCLUDES SEARCHING AND TIMING
        */ 

        starttime = System.nanoTime(); //start time

        for(int i = 0; i < 1000; i++) { //1000 numbers to search for 

            int search = rand.nextInt(32768);  //creates a random number from 0 to 32767. THIS HAS TO STAY THIS WAY OR THE ARRAY WILL HAVE NUMBERS THAT WON'T EVER BE SEARCHED FOR

            for(int j = 0; j < A.length; j++) { //searches through the main array for the number generated in the loop outside of this one
                if(search == A[j]) {
                    break; //if it finds the number, it breaks out of this inner loop
                }
            }
        
        }

        endtime = System.nanoTime(); //end time after searching for 1000 numbers

        totaltime1 = endtime - starttime;    

        System.out.println("Sequential Search1 Time = " + totaltime1);

        starttime = System.nanoTime();

        for(int i = 0; i < 1000; i++) { //1000 numbers to search for 

            int search = rand.nextInt(32768);  //creates a random number from 0 to 32767

            for(int j = 0; j < A.length; j++) { //searches through the main array for the number generated in the loop outside of this one
                if(search == A[j]) {
                    break; //if it finds the number, it breaks out of this inner loop
                }
            }
        
        }

        endtime = System.nanoTime();

        totaltime2 = endtime - starttime; 

        System.out.println("Sequential Search2 Time = " + totaltime2);

        starttime = System.nanoTime();

        for(int i = 0; i < 1000; i++) { //1000 numbers to search for 

            int search = rand.nextInt(32768);  //creates a random number from 0 to 32767

            for(int j = 0; j < A.length; j++) { //searches through the main array for the number generated in the loop outside of this one
                if(search == A[j]) {
                    break; //if it finds the number, it breaks out of this inner loop
                }
            }
        
        }

        endtime = System.nanoTime();

        totaltime3 = endtime - starttime; 

        System.out.println("Sequential Search3 Time = " + totaltime3);

    }
}